AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Architectures:
      - arm64
    Runtime: nodejs14.x
    Timeout: 30
    Handler: index.handler
    Tags:
      {
        "environment": development,
        "regions": "ap-southeast-1",
        "app-name": "fb-messenger-app",
      }

Resources:
###########################################################################
# Virtual Private Network
###########################################################################
  defaultVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 192.168.0.0/16
      InstanceTenancy: default
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

  internetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref internetGateway
      VpcId: !Ref defaultVPC

  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: ap-southeast-1a
      CidrBlock: 192.168.100.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref defaultVPC
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-1a
      CidrBlock: 192.168.110.0/24
      MapPublicIpOnLaunch: false
      VpcId: !Ref defaultVPC
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref defaultVPC
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref defaultVPC
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

  publicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref publicRouteTable
      SubnetId: !Ref publicSubnet1

  privateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref privateRouteTable
      SubnetId: !Ref privateSubnet1

  elasticIP:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt elasticIP.AllocationId
      ConnectivityType: public
      SubnetId: !Ref publicSubnet1
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

  addRouteForPrivateRouteTable:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref privateRouteTable

  addRouteForPublicRouteTable:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref internetGateway
      RouteTableId: !Ref publicRouteTable

###########################################################################
# Security Group
###########################################################################
  lambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Lambda security Group
      GroupName: Lambda security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app
      VpcId: !Ref defaultVPC

###########################################################################
# API Gateway
###########################################################################
  endpointApiRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: API Gateway to Cloudwatch Logs
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        
  endpointApiAccount:
    Type: AWS::ApiGateway::Account
    Properties: 
      CloudWatchRoleArn: !GetAtt endpointApiRole.Arn

  endpointApi:
    Type: AWS::Serverless::Api
    DependsOn: endpointApiAccount
    Properties:
      Auth:
        DefaultAuthorizer: AWS_IAM
      EndpointConfiguration: 
        Type: REGIONAL 
      Description: adakerja-test-endpoint
      MethodSettings:
        - HttpMethod: "*" 
          ResourcePath: /*
          MetricsEnabled: true
          LoggingLevel: ERROR
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 100
      Name: adakerja-test-API-endpoint-1
      StageName: live

###########################################################################
# Lambda Function
###########################################################################
  webhookServer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: webhook-handler-prod
      CodeUri: webhook-handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref endpointApi
            Method: ANY 
            Path: /webhook
            Auth:
              Authorizer: NONE
      VpcConfig:
        SecurityGroupIds: 
          - !Ref lambdaSecurityGroup
        SubnetIds: 
          - !Ref privateSubnet1
      Policies: 
        - VPCAccessPolicy: {}
        - DynamoDBCrudPolicy:
            TableName: !Ref userDatabase
        - DynamoDBCrudPolicy:
            TableName: !Ref chatHistoryDatabase
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 #Reusing Connections with Keep-Alive in Node.js
          WEBHOOK_VERIFY_TOKEN: wvt #<REPLACE_WITH_YOUR_TOKEN>
          PAGE_ACCESS_TOKEN: pat #<REPLACE_WITH_YOUR_TOKEN>
          API_BASE_URL: https://graph.facebook.com/v13.0/me/messages
          USERS_MASTER_TABLE: !Ref userDatabase
          CHAT_HISTORY_TABLE: !Ref chatHistoryDatabase

  getMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-message-handler
      CodeUri: get-message-handler-prod
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref endpointApi
            Method: GET 
            Path: /{proxy+}
            Auth:
              Authorizer: NONE
      Policies: 
        - DynamoDBCrudPolicy:
            TableName: !Ref chatHistoryDatabase
      Environment:
        Variables:
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 #Reusing Connections with Keep-Alive in Node.js
          CHAT_HISTORY_TABLE: !Ref chatHistoryDatabase

###########################################################################
# Database
###########################################################################
  userDatabase:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey: 
        Name: id
        Type: String
      SSESpecification: 
        SSEEnabled: false
      TableName: users-master-prod

  chatHistoryDatabase:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: msg_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema: 
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: msg_id
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: message-id
          KeySchema: 
            - AttributeName: msg_id
              KeyType: HASH
          Projection: 
            ProjectionType: ALL
      SSESpecification: 
        SSEEnabled: false
      TableClass: STANDARD 
      TableName: chat-history-prod
      Tags: 
        - Key: environment
          Value: development
        - Key: regions
          Value: ap-southeast-1
        - Key: app-name
          Value: fb-messenger-app

Outputs:
  endpointApi:
    Description: Rest API base URL
    Value:
      Fn::Sub: "https://${endpointApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/live"